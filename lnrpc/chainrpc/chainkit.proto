syntax = "proto3";

package chainrpc;

option go_package = "github.com/lightningnetwork/lnd/lnrpc/chainrpc";

// ChainKit is a service that can be used to get information from the
// chain backend.
service ChainKit {
    /* lncli: `chain getblock`
    GetBlock returns a block given the corresponding block hash.
    */
    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);

    /* lncli: `chain getbestblock`
    GetBestBlock returns the block hash and current height from the valid
    most-work chain.
    */
    rpc GetBestBlock (GetBestBlockRequest) returns (GetBestBlockResponse);

    /* lncli: `chain getblockhash`
    GetBlockHash returns the hash of the block in the best blockchain
    at the given height.
    */
    rpc GetBlockHash (GetBlockHashRequest) returns (GetBlockHashResponse);
}

message GetBlockRequest {
    // The hash of the requested block.
    bytes block_hash = 1;
}

message GetBlockResponse {
    // The raw bytes of the requested block.
    bytes raw_block = 1;

    // The block hash (same as provided).
    string hash = 2;

    // The number of confirmations.
    int64 confirmations = 3;

    // The block size excluding witness data.
    int64 stripped_size = 4;

    // The block size (bytes).
    int64 size = 5;

    // The block weight as defined in BIP 141.
    int64 weight = 6;

    // The block height or index.
    int32 height = 7;

    // The block version.
    int32 version = 8;

    // The block version.
    string version_hex = 9;

    // The merkle root.
    string merkleroot = 10;

    // List of transaction ids.
    repeated string tx = 11;

    // The block time in seconds since epoch (Jan 1 1970 GMT).
    int64 time = 12;

    // The nonce.
    uint32 nonce = 13;

    // The bits in hex notation.
    string bits = 14;

    // The number of transactions in the block.
    int32 ntx = 15;

    // The hash of the previous block.
    string previous_block_hash = 16;
}

message GetBestBlockRequest {
}

message GetBestBlockResponse {
    // The hash of the best block.
    bytes block_hash = 1;

    // The height of the best block.
    int32 block_height = 2;
}

message GetBlockHashRequest {
    // Block height of the target best chain block.
    int64 block_height = 1;
}

message GetBlockHashResponse {
    // The hash of the best block at the specified height.
    bytes block_hash = 1;
}